---
- fail:
    msg: user_name not defined
  when: user_name is not defined


- name: Check if the public key file exists
  stat:
    path: "{{ pub_key_path }}/{{ user_name }}.pub"
  delegate_to: localhost
  become: false
  register: key_check

- name: Debug the key existence
  debug:
    msg: "Key exists at {{ pub_key_path }}/{{ user_name }}.pub"
  when: key_check.stat.exists

- name: Fail if the key does not exist
  fail:
    msg: "Key {{ user_name }}.pub does not exist in {{ pub_key_path }}. You need to add a key to access the VM since password login will be disabled."
  when: not key_check.stat.exists


- name: Create user {{ user_name }} DEB-based
  user:
    name: "{{ user_name }}"
    shell: /bin/bash
    groups:
      - sudo
    append: yes
    state: present
    update_password: always
  register: user_pass_status_deb
  when: ansible_distribution == "Astra Linux (Smolensk)" or ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" or ansible_distribution == "Astra Linux" or ansible_os_family == "Debian"


- name: Configure sudo to allow passwordless sudo for the user
  lineinfile:
    path: /etc/sudoers
    regexp: '^{{ user_name }}\s+ALL=(ALL:ALL)\s+NOPASSWD:.*'
    line: '{{ user_name }} ALL=(ALL:ALL) NOPASSWD: ALL'
    state: present
    validate: 'visudo -cf %s'




- name: Debug docker variable
  ansible.builtin.debug:
    msg: "The value of docker is {{ docker }}"


- name: Install Docker
  include_tasks: install_docker.yml
  when: docker | bool


- name: Copy .bashrc from /etc/skel to user's home directory
  copy:
    src: /etc/skel/.bashrc
    dest: "/home/{{ user_name }}/.bashrc"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: '0644'
    force: yes
    remote_src: yes
  when: user_name is defined


- name: Set authorized key
  ansible.posix.authorized_key:
    user: "{{ user_name }}"
    key: "{{ lookup('file', 'files/pub_keys/{{ user_name }}.pub') }}"
    state: present
    exclusive: false
